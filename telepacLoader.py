# -*- coding: utf-8 -*-
"""
/***************************************************************************
 telepacLoader
                                 A QGIS plugin
 Charger les xml issu de Télépac
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-06-27
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Matthieu AUGUSTIN
        email                : mattaugustin48@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import * #QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QVBoxLayout, QMessageBox, QProgressBar, QProgressDialog
from qgis.gui import QgsMessageBar
import time

from qgis.core import (
    Qgis, QgsApplication, QgsVectorLayer, QgsProject, QgsField, QgsFeature, QgsGeometry,
    QgsCoordinateReferenceSystem, QgsProcessingFeedback, QgsFillSymbol
)
from qgis.utils import iface
from osgeo import ogr

from .resources import *
from .telepacLoader_dialog import telepacLoaderDialog
import xml.etree.ElementTree as ET
import os

class telepacLoader:
    """QGIS Plugin Implementation."""
    
    file = 0
    def __init__(self, iface):
        
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'telepacLoader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&telepacLoader')
        self.first_start = None
        
        self.progress = QProgressBar()
        self.progress.setGeometry(200, 80, 250, 20)
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        return QCoreApplication.translate('telepacLoader', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        icon_path = ':/plugins/telepacloader/alien.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        
    def select_output_file(self):
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select output file ","", "XML(*.xml)")
        self.dlg.linexml.setText(filename)
        global file
        file = filename
        #iface.messageBar().pushMessage("Fichier", str(file))
        if not filename or filename== '':
            return
        
        #macouche= QgsVectorLayer(filename, "Ma couche", 'ogr')
        #if not macouche or not macouche.isValid():
            #QMessageBox.warning(self.iface.mainWindow(), "Echec",
                #"Le fichier \"%s\" n'est pas reconnu par Qgis."% filename.replace('/', os.sep ) )
            #return
        #QgsProject.instance().addMapLayer(macouche)
        
    
    
    #Init ProgressDialog
        
    def progdialog(progress):
        dialog = QProgressDialog()
        dialog.setWindowTitle("Progress")
        dialog.setLabelText("Traitement du XML")
        bar = QProgressBar(dialog)
        bar.setTextVisible(True)
        bar.setValue(progress)
        dialog.setBar(bar)
        dialog.setMinimumWidth(300)
        dialog.show()
        return dialog, bar
    
    def loadXml(self):
        #iface.messageBar().pushMessage("Fichier", str(file))
        chemin = os.path.dirname(os.path.abspath(__file__))
        Fich = open(chemin +'/test.txt','a')
        
        #PROGRESS BAR
        
        # CREATE LAYERS WITH FIELDS
        #ILOTS
        ilots = QgsVectorLayer("Polygon", "ilots", "memory")
        pri = ilots.dataProvider()
        pri.addAttributes([QgsField("pacage", QVariant.String),
                          QgsField("ilot",  QVariant.String),
                          QgsField("commune", QVariant.String)]) # Int ou Double ou String
        ilots.updateFields()
        
        #PARCELLES
        parcelles = QgsVectorLayer("Polygon", "parcelles", "memory")
        prp = parcelles.dataProvider()
        prp.addAttributes([QgsField("pacage", QVariant.String),
                           QgsField("numero", QVariant.String),
                           QgsField("culture", QVariant.String),
                           QgsField("culture2", QVariant.String),
                           QgsField("precision", QVariant.String),
                           QgsField("cible", QVariant.String),
                           QgsField("admissible", QVariant.String),
                           QgsField("reconversion_pp", QVariant.String),
                           QgsField("retournement_pp", QVariant.String),
                           QgsField("iae", QVariant.String),
                           QgsField("commercialisation", QVariant.String),
                           QgsField("semences", QVariant.String),
                           QgsField("semences_fermieres", QVariant.String),
                           QgsField("deshydratation", QVariant.String),
                           QgsField("ukraine", QVariant.String),
                           QgsField("accident", QVariant.String),
                           QgsField("labour", QVariant.String),
                           QgsField("conduitebio", QVariant.String),
                           QgsField("type_conduite", QVariant.String),
                           QgsField("conduite_maraichage", QVariant.String)
                          ])
        parcelles.updateFields()
        
        #SNA
        sna = QgsVectorLayer("Polygon", "sna", "memory")
        prs = sna.dataProvider()
        prs.addAttributes([QgsField("pacage", QVariant.String),
                          QgsField("numerosna",  QVariant.String),
                          QgsField("categorie", QVariant.String),
                          QgsField("type", QVariant.String),
                          QgsField("localisation", QVariant.String),
                          QgsField("ilot_r", QVariant.String),
                          QgsField("parcelle_r", QVariant.String),
                          QgsField("mur", QVariant.String)])
        sna.updateFields()
        
        #ZDH
        zdh = QgsVectorLayer("Polygon", "zdh", "memory")
        prz = zdh.dataProvider()
        prz.addAttributes([QgsField("pacage", QVariant.String),
                          QgsField("numerozdh",  QVariant.String),
                          QgsField("vegetation", QVariant.String)])
        zdh.updateFields()
        
        #BIO
        bio = QgsVectorLayer("Polygon", "bio", "memory")
        prb = bio.dataProvider()
        prb.addAttributes([QgsField("pacage", QVariant.String),
                          QgsField("numerobio",  QVariant.String),
                          QgsField("codemesure", QVariant.String),
                          QgsField("can", QVariant.String)])
        bio.updateFields()
        
        #MAEC
        maec = QgsVectorLayer("Polygon", "maecs", "memory")
        prm = maec.dataProvider()
        prm.addAttributes([QgsField("pacage", QVariant.String),
                          QgsField("numeromae",  QVariant.String),
                          QgsField("codemesure", QVariant.String),
                          QgsField("semis", QVariant.String)])
        maec.updateFields()
        #AIDES
        
        """ALGO"""
        with open(str(file), 'r', encoding = "ISO-8859-1") as f:
            xml = f.readlines()
            #suppression d'un attribut
            xml = [i.replace('xmlns="urn:x-telepac:fr.gouv.agriculture.telepac:echange-producteur"','') for i in xml]
            
            z = open(chemin+'/loadXML.xml','w')
            z.writelines(xml)
            z.close()
            
            tree = ET.parse(chemin +'/loadXML.xml')
            root = tree.getroot()
            
            """COMPTEUR DE PACAGE"""
            count=0
            for p in root.iter('producteur'):
                count = count + 1
            #QMessageBox.information(self.iface.mainWindow(), "Nombre de producteurs dans le fichier", " \"%s\" producteur(s) "% count )
            iface.messageBar().pushMessage("Nombre de producteurs dans le fichier: ", str(count), duration=10)
            
            """PARSE XML"""
            for pacage in root.iter('producteur'):
                #iface.messageBar().pushMessage("Pacage en cours: ", str(count))
                num_Pacage = pacage.get("numero-pacage")
                    
                """ILOTS"""
                for ilot in pacage.iter('ilot'):
                    numeroPacage = pacage.get("numero-pacage")
                    numeroIlot = ilot.get("numero-ilot")
                    commune = ilot[0].text
                    
                    #GEOM
                    gmlIlot = ilot.find('geometrie')[0]
                    xmlIlot = ET.tostring(gmlIlot, encoding='utf8', method='xml').decode("utf-8")
                    geomXmlIlot = ogr.CreateGeometryFromGML(xmlIlot)
                    geomIlot = geomXmlIlot.ExportToWkt()#.encode('hex')

                    # ADD FEATURE
                    featureIlot = QgsFeature()
                    featureIlot.setGeometry(QgsGeometry.fromWkt(geomIlot))
                    featureIlot.setAttributes([str(numeroPacage), str(numeroIlot), str(commune)])
                    pri.addFeatures([featureIlot])
                    
                """PARCELLES"""
                for parcelle in pacage.iter('parcelle'):
                    
                    #DATA
                    numeroPacage = pacage.get("numero-pacage")
                    numeroParcelle = parcelle[0].get("numero-parcelle")
                    culture = parcelle[0][0].find("code-culture").text
                    try:
                        culture2 = parcelle[0][0].get("culture-secondaire")
                        if culture2 is None:
                            culture2  = 'null'
                    except:
                        culture2 = 'null'
                    try:
                        precision = parcelle[0][0].find('precision').text
                        if precision is None:
                            precision  = 'null'
                    except:
                        precision = 'null'
                    try:
                        cible = parcelle[0][1].get("surface-cible")
                        if cible is None:
                            cible  = 'null'
                    except:
                        cible = 'null'
                        
                    try:
                        admissible = str(float(parcelle[2].text)/100)
                        if admissible is None:
                            admissible  = 'null'
                    except:
                        admissible = '0'
            
                    try:
                        reconversion_pp = parcelle[0][0].find('reconversion-pp').text
                        if reconversion_pp is None:
                            reconversion_pp  = 'null'
                    except:
                        reconversion_pp = 'null'
                        
                    try:
                        retournement_pp = parcelle[0][0].find('retournement-pp').text
                        if retournement_pp is None:
                            retournement_pp  = 'null'
                    except:
                        retournement_pp = 'null'
                        
                    try:
                        iae = parcelle[0][0].find('declare-iae').text
                        if iae is None:
                            iae  = 'null'
                    except:
                        iae = 'null'
                        
                    try:
                        commercialisation = parcelle[0][0].get("destination")
                        if commercialisation is None:
                            commercialisation  = 'null'
                    except:
                        commercialisation = 'null'
                        
                    try:
                        semences = parcelle[0][0].get("production-semences")
                        if semences is None:
                            semences = 'null'
                    except:
                        semences = 'null'
        
                    try:
                        semences_fermieres = parcelle[0][0].get("production-fermieres")
                        if semences_fermieres is None:
                            semences_fermieres = 'null'
                    except:
                        semences_fermieres = 'null'
            
                    try:
                        deshydratation = parcelle[0][0].get("deshydratation")
                        if deshydratation is None:
                            deshydratation = 'null'
                    except:
                        deshydratation = 'null'
                   
                    try:
                        ukraine = parcelle[0][0].get("derogation-ukraine")
                        if ukraine is None:
                            ukraine = 'null'
                    except:
                        ukraine = 'null'
            
                    try:
                        accident = parcelle[0][0].get("accident-culture")
                        if accident is None:
                            accident = 'null'
                    except:
                        accident = 'null'
    
                    try:
                        labour = parcelle[0][0].get("date-labour")
                        if labour is None:
                            labour = 'null'
                    except:
                        labour = 'null'
                        
                    try:
                        conduitebio = parcelle[0][1].get("conduite-bio")
                        if conduitebio is None:
                            conduitebio  = 'null'
                    except:
                        conduitebio = 'null'
                
                    try:
                        type_conduite = parcelle[0][1].get("type-conduite-bio")
                        if type_conduite is None:
                            type_conduite  = 'null'
                    except:
                        type_conduite = 'null'
            
                    try:
                        conduite_maraichage = parcelle[0][1].get("conduite-maraichage")
                        if conduite_maraichage is None:
                            conduite_maraichage  = 'null'
                    except:
                        conduite_maraichage = 'null'
                        
                    #GEOM
                    gmlParcelle = parcelle.find('geometrie')[0]
                    xmlParcelle = ET.tostring(gmlParcelle, encoding='utf8', method='xml').decode("utf-8")
                    geomXmlParcelle = ogr.CreateGeometryFromGML(xmlParcelle)
                    geomParcelle = geomXmlParcelle.ExportToWkt()#.encode('hex')

                    # ADD FEATURE
                    featureParcelle = QgsFeature()
                    featureParcelle.setGeometry(QgsGeometry.fromWkt(geomParcelle))
                    featureParcelle.setAttributes([str(numeroPacage), str(numeroParcelle), str(culture), str(culture2),
                                                  str(precision), str(cible), str(admissible), str(reconversion_pp), str(retournement_pp),
                                                  str(iae), str(commercialisation), str(semences), str(semences_fermieres),
                                                  str(deshydratation), str(ukraine), str(accident), str(labour),
                                                  str(conduitebio), str(type_conduite), str(conduite_maraichage)])
                    prp.addFeatures([featureParcelle])
            
            
                """SNA"""
                for s in pacage.iter('sna-declaree'):
                    numeroPacage = pacage.get("numero-pacage")
                    try:
                        numeroSna = s.find('numeroSna').text
                    except:
                        numeroSna = 'null'
                    try:
                        categorieSna = s.find('categorieSna').text
                    except:
                        categorieSna = 'null'
                    try:
                        typeSna = s.find('typeSna').text
                    except:
                        typeSna = 'null'
                    try:
                        localisationSna = s.find('localisationArbreIsole').text
                    except:
                        localisationSna = 'null'
                    try:
                        ilotR = s.find('identifiantParcelleArbreIsole')[0].text
                    except:
                        ilotR  = 'null'
                    try:
                        parcelleR = s.find('identifiantParcelleArbreIsole')[1].text
                    except:
                        parcelleR = 'null'
                    try:
                        murSna = s.find('murTraditionnelPierreSIE').text
                    except:
                        murSna = 'null'
                    
                    #GEOM
                    gmlSna = s.find('geometrie')[0]
                    xmlSna = ET.tostring(gmlSna, encoding='utf8', method='xml').decode("utf-8")
                    geomXmlSna = ogr.CreateGeometryFromGML(xmlSna)
                    geomSna = geomXmlSna.ExportToWkt()#.encode('hex')

                    # ADD FEATURE
                    featureSna = QgsFeature()
                    featureSna.setGeometry(QgsGeometry.fromWkt(geomSna))
                    featureSna.setAttributes([str(numeroPacage), str(numeroSna), str(categorieSna), str(typeSna),
                                             str(localisationSna), str(ilotR), str(parcelleR), str(murSna)])
                    prs.addFeatures([featureSna])
                
                """ZDH"""
                for z in pacage.iter('zdh-declaree'):
                    numeroPacage = pacage.get("numero-pacage")
                    numeroZdh = z[0].text
                    vegetation = z[1].text
                    
                    #GEOM
                    gmlZdh = z.find('geometrie')[0]
                    xmlZdh = ET.tostring(gmlZdh, encoding='utf8', method='xml').decode("utf-8")
                    geomXmlZdh = ogr.CreateGeometryFromGML(xmlZdh)
                    geomZdh = geomXmlZdh.ExportToWkt()#.encode('hex')

                    # ADD FEATURE
                    featureZdh = QgsFeature()
                    featureZdh.setGeometry(QgsGeometry.fromWkt(geomZdh))
                    featureZdh.setAttributes([str(numeroPacage), str(numeroZdh), str(vegetation)])
                    prz.addFeatures([featureZdh])
                    
                """BIO"""
                for b in pacage.iter('element-bio'):
                    numeroPacage = pacage.get("numero-pacage")
                    try:
                        numerobio = b.find('numero-element').text
                    except:
                        numerobio = 'null'
                    try:
                        codemesure = b.find('code-mesure').text
                    except:
                        codemesure = 'null'
                    try:
                        annuelle = b.find('cultures-annuelles').text
                    except:
                        annuelle = 'true'
                    
                    #GEOM
                    gmlBio = b.find('geometrie')[0]
                    xmlBio = ET.tostring(gmlBio, encoding='utf8', method='xml').decode("utf-8")
                    geomXmlBio = ogr.CreateGeometryFromGML(xmlBio)
                    geomBio = geomXmlBio.ExportToWkt()#.encode('hex')

                    # ADD FEATURE
                    featureBio = QgsFeature()
                    featureBio.setGeometry(QgsGeometry.fromWkt(geomBio))
                    featureBio.setAttributes([str(numeroPacage), str(numerobio), str(codemesure), str(annuelle)])
                    prb.addFeatures([featureBio])
                    
                """MAECS"""
                for m in pacage.iter('element-surfacique'):
                    numeroPacage = pacage.get("numero-pacage")
                    try:
                        numeromae = m.find('numero-element').text
                    except:
                        numeromae = 'null'
                    try:
                        codemesure = m.find('code-mesure').text
                    except:
                        codemesure = 'null'
                    try:
                        semis = m.find('semis-sous-couvert').text
                    except:
                        semis = 'true'
                    
                    #GEOM
                    gmlMae = m.find('geometrie')[0]
                    xmlMae = ET.tostring(gmlMae, encoding='utf8', method='xml').decode("utf-8")
                    geomXmlMae = ogr.CreateGeometryFromGML(xmlMae)
                    geomMae = geomXmlMae.ExportToWkt()#.encode('hex')

                    # ADD FEATURE
                    featureMae = QgsFeature()
                    featureMae.setGeometry(QgsGeometry.fromWkt(geomMae))
                    featureMae.setAttributes([str(numeroPacage), str(numeromae), str(codemesure), str(semis)])
                    prm.addFeatures([featureMae])
                
                """AIDES"""
                
        layerCrs = QgsCoordinateReferenceSystem.fromEpsgId(2154)
        ilots.setCrs(layerCrs)
        parcelles.setCrs(layerCrs)
        sna.setCrs(layerCrs)
        zdh.setCrs(layerCrs)
        bio.setCrs(layerCrs)
        maec.setCrs(layerCrs)
        
        ilots.updateExtents()
        parcelles.updateExtents()
        sna.updateExtents()
        zdh.updateExtents()
        bio.updateExtents()
        maec.updateExtents() 
        
        QgsProject.instance().addMapLayer(sna)
        QgsProject.instance().addMapLayer(zdh)
        QgsProject.instance().addMapLayer(bio)
        QgsProject.instance().addMapLayer(maec)
        QgsProject.instance().addMapLayer(parcelles)
        QgsProject.instance().addMapLayer(ilots)
        
        #SYMBOL
        ilotsSymbol = QgsFillSymbol.createSimple({'color':'#ff0000',
                                                  'color_border':'#ff0000',
                                                  'width_border':'1',
                                                  'style':'no'
                                                 })
        parcellesSymbol = QgsFillSymbol.createSimple({'color':'rgb(17, 217, 0)',
                                                      'color_border':'#11d900',
                                                      'width_border':'0.5'
                                                     })
        snaSymbol = QgsFillSymbol.createSimple({'color':'#ff8bfb',
                                                'color_border':'#000000',
                                                'width_border':'0.2'
                                               })
        bioSymbol = QgsFillSymbol.createSimple({'color':'#000aff',
                                                'color_border':'#000000',
                                                'width_border':'0.2'
                                                })
        maecSymbol = QgsFillSymbol.createSimple({'color':'#fff500',
                                                 'color_border':'#000000',
                                                 'width_border':'0.2'
                                                })
        zdhSymbol = QgsFillSymbol.createSimple({'color':'#ffb100',
                                                'color_border':'#ffffff',
                                                'width_border':'0.2'
                                                })
        ilotsRenderer = ilots.renderer()
        parcellesRenderer = parcelles.renderer()
        snaRenderer = sna.renderer()
        bioRenderer = bio.renderer()
        maecRenderer = maec.renderer()
        zdhRenderer = zdh.renderer()
            
        ilotsRenderer.setSymbol(ilotsSymbol)
        parcellesSymbol.setOpacity(0.5)
        parcellesRenderer.setSymbol(parcellesSymbol)
        snaSymbol.setOpacity(0.3)
        snaRenderer.setSymbol(snaSymbol)
        bioSymbol.setOpacity(0.3)
        bioRenderer.setSymbol(bioSymbol)
        maecSymbol.setOpacity(0.3)
        maecRenderer.setSymbol(maecSymbol)
        zdhSymbol.setOpacity(0.3)
        zdhRenderer.setSymbol(zdhSymbol)
            
        ilots.triggerRepaint()
        parcelles.triggerRepaint()
        sna.triggerRepaint()
        bio.triggerRepaint()
        maec.triggerRepaint()
        zdh.triggerRepaint()
        
        iface.layerTreeView().refreshLayerSymbology(ilots.id())
        iface.layerTreeView().refreshLayerSymbology(parcelles.id())
        iface.layerTreeView().refreshLayerSymbology(sna.id())
        iface.layerTreeView().refreshLayerSymbology(zdh.id())
        iface.layerTreeView().refreshLayerSymbology(bio.id())
        iface.layerTreeView().refreshLayerSymbology(maec.id())

            
        Fich.close()
        
        #iface.messageBar().clearWidgets()
        
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&telepacLoader'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = telepacLoaderDialog()
            self.dlg.pushxml.clicked.connect(self.select_output_file)
            self.dlg.pushLoad.clicked.connect(self.loadXml)

        #self.bar.pushMessage("Hello", "World", level=Qgis.Info)
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
